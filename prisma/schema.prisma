generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma-client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

enum RequestSource {
  TELEGRAM
  DISCORD
}

model Request {
  id        Int            @id @default(autoincrement())
  query     Json
  status    RequestStatus
  source    RequestSource?
  resultId  Int?
  createdAt DateTime       @default(now())

  result          RequestResult?    @relation(fields: [resultId], references: [id])
  logs            RequestLog[]
  TelegramRequest TelegramRequest[]
  DiscordRequest  DiscordRequest[]
}

model RequestLog {
  id        Int      @id @default(autoincrement())
  requestId Int
  message   String   @db.Text
  createdAt DateTime @default(now())

  request Request @relation(fields: [requestId], references: [id])
}

model RequestResult {
  id        Int      @id @default(autoincrement())
  payload   Json
  createdAt DateTime @default(now())

  requests Request[]
}

model Setting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value Json
}

model Cache {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  expiresAt DateTime
  createdAt DateTime @default(now())
}

//----------------------------------------------------------------------------------------------------------------------
// Telegram
//----------------------------------------------------------------------------------------------------------------------

model TelegramAccount {
  id           Int      @id @default(autoincrement())
  telegramId   BigInt   @unique
  isBot        Boolean
  firstName    String
  lastName     String?
  username     String?
  languageCode String?
  isPremium    Boolean?
  createdAt    DateTime @default(now())

  telegramRequests TelegramRequest[]
}

enum TelegramRequestType {
  PREFETCH
  INLINE
  MESSAGE
}

model TelegramRequest {
  id        Int                 @id @default(autoincrement())
  accountId Int
  query     String
  type      TelegramRequestType
  requestId Int
  createdAt DateTime            @default(now())

  account TelegramAccount? @relation(fields: [accountId], references: [id])
  request Request          @relation(fields: [requestId], references: [id])
}

//----------------------------------------------------------------------------------------------------------------------
// Discord
//----------------------------------------------------------------------------------------------------------------------

model DiscordRequest {
  id        Int      @id @default(autoincrement())
  query     String
  requestId Int
  createdAt DateTime @default(now())

  request Request @relation(fields: [requestId], references: [id])
}

//----------------------------------------------------------------------------------------------------------------------
// Instagram
//----------------------------------------------------------------------------------------------------------------------

model InstagramParserAccount {
  id                     Int       @id @default(autoincrement())
  username               String
  password               String
  gmailTwoFactorAuthData Json?
  isActive               Boolean
  lastUsedAt             DateTime?
  updatedAt              DateTime  @default(now()) @updatedAt
  createdAt              DateTime  @default(now())
}
